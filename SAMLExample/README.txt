Code structure:
===============

src
 |--com.example.security
                            |--saml
                                  |--SAMLparams.java : A data class contains SAML assertion basic information, such as subject ID, Issuer, etc.
                                  |--SAMLSigner.java : A utility class that signs SAML assertion. Also, it can validate SAML assertion's signature.
                                  |--SAMLToken.java :  A utility class that can create, sign, encode SAML assertion.
                            |--util
                                  |--KeyStoreUtil.java : A utility class that access keystore information.
                                  |--PrettyPrinter.java: A utility class to print XML document nicely.
test
 |--com.example.security.saml
                            |--SAMLTokenTest.java : Junit test class.
lib
 |--OpenSAML library jar files.
 |--endorsed
          |--OpenSAML requires JAXP 1.3 and DOM 3. But JVM bundled with Sun's XML parser. The endorsed lib is to overwrite JVM's XML parser.
build
  |--Build target directory.


How to build project:
=====================
The project can be build by using Java command line javac command or load the project into IDE (such as Eclipse, Intellij).

1) Use Java command line:
   javac -Djava.endorsed.dirs=lib\endorsed -classpath "lib\*;lib\endorsed;build" -d build -sourcepath src src/com/example/security/saml/SAMLToken.java
   cd build
   jar cf samlexample.jar *
   That will create the samlexample.jar files that contains all class. User need to add the samlexample.jar
   plus all jar files under lib and lib/endorsed folder in the deployment environment.

2) Use IDE to build:
   Load the project into IDE. Make sure have the JVM option -Djava.endorsed.dirs=lib\endorsed set for the project.

How to use the jar file with existing environment:
==================================================
User need to add the jar files created in the previous compilation step, plus all OpenSAML jar files under lib and lib/endorsed directory to production classpath.
Use the sample code in SAMLToken.main() to call the SAMLToken methods to create, sign and encode SAML assertion. Then inject the SAML token to the HTTP Authorization
header.

Integration Steps:
==================

1) Create the signing key pairs. In production, it is required to use CA signed certificate. In development, user can use the following command to generate
   the public/private key pair and put in a keystore.
   keytool -genkey -alias example -keyalg RSA -keypass password -storepass password -keystore Example.jks

   follow the questions to fill in CN and OU information for the key. You can replace the key alias name, keystore name and password in the above command.

2) Export the public certificate that signing the SAML token. This will need to be sent to service provider for validate the SAML token.
   keytool -export -alias example -keystore Example.jks -rfc -file Example.pem

3) Create a configuration properties files, similar as the "config.properties" under the OpenSAML directory. This properties file contains
   the keystore information that SAMLSigner class need to sign the SAML assertion, as well as SAML token properties. User need to load these
   properties into Java properties object and pass it in to SAMLToken.init(properties) method when initialize the library.
   Here is the properties need to be configured:

   ### Sighing Certificate and Keystore Section ###
   ### Information here need to be matched with keystore used ###
   KEYSTORE=Example.jks                 <== The absolute path for the keystore file.
   STOREPASS=password                   <== The keystore password.
   ALIAS=example                        <== The key alias in the keystore for which is used to sign the SAML assertion.
   KEYPASS=password                     <== The key password.
   KEYALG=RSA                           <== The algorithm for generate the key.
   KEYSIZE=1024                         <== The key size.

   These information need to be match with the keystore (either user generated by using keytool, or CA signed keystore).

   ### SAML Assertion Configuration Secion ###
   ISSUER=http://www.example.com        <== SAML token issuer.
   VLIDATION_DURATION=720               <== SAML token validation duration in minutes.
   SESSION_TIMEOUT=15                   <== SAML authen profile session time out.

4) In your program, reference the following code sample to generate the SAML token.

   4.1) Create and initialize SAMLToken instance. User can use one SAMLToken instance in JVM to create SAML assertion for all request.
            Properties  properties = new Properties();
            properties.load(new FileInputStream("security.properties"));
            sAMLToken samlToken = new SAMLToken();
            samlToken.init(properties);

   4.2) Create subject information for every SAML assertion. This is used when user want to create a SAML token.
            UUID uuid = UUID.randomUUID();

            SAMLParams params = new SAMLParams();

            //Define the SAML issuer.
            params.setIssuer(properties.getProperty("ISSUER", "http://www.example.com"));

            //Set SAML token validation duration in minutes.
            params.setValidationDuration(Integer.parseInt(properties.getProperty("VALIDATION_DURATION", "720")));

            //This is for each user's ID. Can be username or email.
            params.setNameID("JohnDoe@example.com");

            //The name qualifier is the IdP which produce the subject.
            params.setNameQualifier("example.com");

            //Session id can be any ramdon string.
            params.setSessionId(uuid.toString());

            //If SPCo need any attribute to be passed from Example, you can set there. Otherwise no need.
            Map customAttributes = new HashMap();
            customAttributes.put("Identity", "Example Software");
            customAttributes.put("Usage", "Test with SPCo");
            params.setAttributes(customAttributes);

   4.3) Create, encode, sign and compress SAML assertion to become a SAML token.
            //This create a SAML assertion based on the usre information collected in 4.2)
            Assertion assertion = samlToken.buildSAMLAssertion(params);

            //This sign and encode the SAML assertion.
            String token = samlToken.encodeAndSignSAMLAssertion(assertion);

            //This compress the SAML assertion to a token that can be used in HTTP Authorization header.
            String compressedToken = samlToken.compressSAMLAssertion(token);

   4.4) Put the compressedToken to HTTP request header:
            Authorization: SAML <compressedToken>       <== Authorization is the HTTP Header name, SAML <compressedToken> is the value.
        Make sure your web server should allow HTTP header size to be at least 8KB.


Sample SAML Assertion:
======================
Here is the sample SAML assertion generated by the sample code:

<saml2:Assertion IssueInstant="2014-08-31T05:04:25.353Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">
    <saml2:Issuer>http://www.example.com</saml2:Issuer>
    <Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
        <SignedInfo>
            <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments" />
            <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
            <Reference URI="">
                <Transforms>
                    <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />
                </Transforms>
                <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />
                <DigestValue>rlBPYVCX0NpXl2xk9kA0hO7d2g8=</DigestValue>
            </Reference>
        </SignedInfo>
        <SignatureValue>HUOou9u793rLjkwSDu2DmpA1YKEWLQ7a0NyGHSC1trzF6Z2ivl7T0QV8OH0CMNIW6Fkn+FGJbOgI
it8covBHTr5c+a7a5Svs7l7xB1GWH8veuE+W6NTI5hryW3c/c/sz3R65Eje9nfWjKrH+ojxnm79X
VPkOvQk547oTf5e63AI=</SignatureValue>
        <KeyInfo>
            <X509Data>
                <X509Certificate>MIICgzCCAeygAwIBAgIEVAJyoTANBgkqhkiG9w0BAQUFADCBhTELMAkGA1UEBhMCQ0ExEzARBgNV
BAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xFzAVBgNVBAoTDk1hcmluIFNv
ZnR3YXJlMRcwFQYDVQQLEw5NYXJpbiBTb2Z0d2FyZTEXMBUGA1UEAxMOTWFyaW4gU29mdHdhcmUw
HhcNMTQwODMxMDA1NjAxWhcNMTQxMTI5MDA1NjAxWjCBhTELMAkGA1UEBhMCQ0ExEzARBgNVBAgT
CkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xFzAVBgNVBAoTDk1hcmluIFNvZnR3
YXJlMRcwFQYDVQQLEw5NYXJpbiBTb2Z0d2FyZTEXMBUGA1UEAxMOTWFyaW4gU29mdHdhcmUwgZ8w
DQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKRqWbIxUzeJ878ruQiT8a4pluQT329t7xBAKwoBUYcX
7q3zIJesbDxrMJmIrGJZgj4DDkZHWBP7LyaO366MUO6qzCItpVMMTC6smxx32/q80jsDO1A3LVm1
8nuRgxCxiBc5Uh9tIqe69wcw49ObAo8MlMFJDiWF0iu5ZFet88GDAgMBAAEwDQYJKoZIhvcNAQEF
BQADgYEAM63nJ4MY19LR2LE5d2PrBGBIAexGJjMIVivFuMfxV1NYUfy3g5T4PIxWEtokeytnbYNv
puz9Heex919cRiWLIEOxKlajJNBIOsUqBwkpaWoQIz5C05BfXI1kwfYxofsBlALJol4aE30E0rj2
7zT0xwXFKHh8gObYEPV5sD6L0cE=</X509Certificate>
            </X509Data>
        </KeyInfo>
    </Signature>
    <saml2:Subject>
        <saml2:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" NameQualifier="example.com">JohnDoe@example.com</saml2:NameID>
        <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" />
    </saml2:Subject>
    <saml2:Conditions NotBefore="2014-08-31T05:04:15.353Z" NotOnOrAfter="2014-08-31T17:04:25.353Z" />
    <saml2:AuthnStatement AuthnInstant="2014-08-31T05:04:25.326Z" SessionIndex="64ef4a2f-c500-4cb7-a6ac-9b6d24c66a3e" SessionNotOnOrAfter="2014-08-31T05:04:25.341Z">
        <saml2:AuthnContext>
            <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
        </saml2:AuthnContext>
    </saml2:AuthnStatement>
    <saml2:AttributeStatement>
        <saml2:Attribute Name="Identity">
            <saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Example Co</saml2:AttributeValue>
        </saml2:Attribute>
        <saml2:Attribute Name="Usage">
            <saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Test with SP</saml2:AttributeValue>
        </saml2:Attribute>
    </saml2:AttributeStatement>
</saml2:Assertion>

Here is the encoded SAML token that can be put in HTTP Authorization header:
============================================================================
zVbJlqJIFN37FR5qWcdkEgRPancwKaZoqjjuEIJBGUwIBP36DrS0rKzM6uo-vegV8OLGfffGwHvP
f5RRWD_CNAuSuEPQTxRRh7GdOEHsdYi5qTUE4o9u7TmzopBpgyyDKcLIup5lOdTjDFkx6hAMRTcb
lNBgaZPi2lSzzXBPLMduiPrixsxUzDhXnLUvXB0iT-N2YmVB1o6tCGZtZLdnwBi2MbJt3RIR3W-p
LwnTro_QoU2SRVE8RVYaxFniosJK4ZOdRM_kD9DnWeDFFspTeM3bIR4mF-xTknokQ1EUSYkkBjhZ
4H0hrrOgo8du0n2WrTiJA9sKg7NVqTEg8hOnDkIvSQPkRx9RmtOKlSanqtzAtA2bbsaNKkKxNPdl
iafJSRTBGGUE-aDxd6jfq00zq5H5Fl0RTaELU7xzsD6f6h0CGzFTK87cJI2yh_d_lgDGRxgmB-g0
spvOKhf5SK0EHszQv5F_k35lWFhhDrtpKL2uF_KKGh1WIVPuxT2g_HHLYTyh80w-Ip_Ju2X8_rhr
9zW9AvvzcZKLeUtk0-FuX8yUnFGiA6DXL-pyOGlZ1OjU689kGqVnjd8wwTFsmdRkIYz7lGyM9CWv
7eOvWm-wHXt6LUCCnRylvply9lerZXGzY9YKW6VE95Z94Qhz9euSH5k656enJWuTNpmd2SnPqTso
xu5y95L2vya7Mo5a4qq2eN2Pj5M912wlpstBngV652rlQf7zCzxdfa04SlQsZF3f5OqCuPhwItg1
dF32zrIM4MkDhS4BT1cXYHBKTDCSvP2bvw96YkFJYDLXgCJLvqkODbDvAXquSr4hTyi1VM9gKnmj
RQ3PNuX9yN_2wmjLDnJrqZbaDsyrQQnYprLAY4HUsyMtXzPhec0IpXYGi-t4Yip72rejMNe10bG2
iafsejUIjaldaJO1sphMhmrBjXDsgEnMLbOhHEY7bUx1ZUjziyJQGmNzqZ2sZdObM2Lk9B1MOC9q
fd8eGeakGCtGaSiAHu1AubzGSgOv-T22-7XFymHtv7JYOaz9Vxa9jVDUlMl68JJsdP9oj8BElaQJ
ULw1BQy9NwBJTwIv07flVi_nZzgQWkKaTwJTsJqHMJ-YLCMifBrBS5FI87W9qrXe2LM-gNlWKVNj
EOlpb7Dxdk1F2W_6S-m1NTxZY5bnjfmYfzvLOjosDMOU-SwqS5Yh3wRqlyljGrDDRUTXhDifeqVc
BpLNzX0R6W-QFwu7aIrjLUgEIzS0gRIsNSrIuY0GkSD0FOAZEgBq8c6VVrvaUoHBs_GgaaxpcThl
hirnMK-p1JN0AMveYGfoi-Co5YZbLujReu6eWI8zm696uVRRsocnFG_X-Jwd8rPYh7AUadGeBsuh
ro7Ll9DaDUaSPs7mb1KxP1jLZKKfOZniJHel0_vCXZeJm0khGA6SsGmpLKVS6Y6ptc4mVRYr7aXv
C954u1ZfF1ym8EPKVvH9fH_5rpHrxSTvl_X7Nb5VsFm-3UEb3T5HuOjpSl3Df1ELfV4N6Sf6Egmc
hnuBtmFkBSFwnBRmGVGvaCY5rlBuANMO8VNRJLqDxI-VBP75ab28KnknU05iN6jyVdX--nf_dcm2
o_YWYub0UiE-tIw5naAizOqjBEkQG4IfNA_0rXnAoHE8ToGLKmsPOLr12GSQN36QIz-eIbwpVX2t
Xz5_3aMwPE4zwwuJRemxA8sOwTeh27QYt2FzFNVo2ttWw-ItuyFueYdp2jxvsfA-51OF31M06Q3x
g0C8CgiW6KOYHOLGB5e17i97I7ttVzgcfsWPIkmd23p_yPXR4I_B-5LdNSGUBtscwc9HLgevQ-gO
HgzQifgJcKle3zq-8rPmiyZXxnBm-_hME3ds8PfgRnDZVhvvBMa30emAtZS4tcTJY4_oGtVZr8--
Hfa72R-0dX8Kf2Zynlke_J85NHEjVC9wq1U3gtgxk9z2f98m-fk2k-86_e5f

How to customize and enhance the code:
======================================
User can enhance the SAML generation code base on their own requirement. All
you need to do is to pull out or put in SAML block in SAMLToken.buildSAMLAssertion().
